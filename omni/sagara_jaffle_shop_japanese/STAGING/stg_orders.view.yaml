# Reference this view as staging__stg_orders
#This description was pulled from dbt.
description: Order data with basic cleaning and transformation applied, one row per order.

schema: STAGING
table_name: STG_ORDERS

dimensions:
  order_id:
    sql: '"ORDER_ID"'
    format: ID
    #This description was pulled from dbt.
    description: The unique key for each order.

  location_id:
    sql: '"LOCATION_ID"'
    format: ID

  customer_id:
    sql: '"CUSTOMER_ID"'
    format: ID

  subtotal_cents:
    sql: '"SUBTOTAL_CENTS"'

  tax_paid_cents:
    sql: '"TAX_PAID_CENTS"'

  order_total_cents:
    sql: '"ORDER_TOTAL_CENTS"'

  subtotal:
    sql: '"SUBTOTAL"'

  tax_paid:
    sql: '"TAX_PAID"'

  order_total:
    sql: '"ORDER_TOTAL"'

  purchased_at:
    sql: '"PURCHASED_AT"'

measures:
  count:
    aggregate_type: count

#The info below was pulled from your dbt repository and is read-only.
dbt:
  name: stg_orders
  target_schema: PROD
  description: Order data with basic cleaning and transformation applied, one row per order.
  config:
    schema: staging
    materialized: view
  code: |-
    with

    source as (

        select * from {{ source('ecom', 'raw_orders') }}

    ),

    renamed as (

        select

            ----------  ids
            id as order_id,
            store_id as location_id,
            customer as customer_id,

            ---------- numerics
            subtotal as subtotal_cents,
            tax_paid as tax_paid_cents,
            order_total as order_total_cents,
            {{ cents_to_dollars('subtotal') }} as subtotal,
            {{ cents_to_dollars('tax_paid') }} as tax_paid,
            {{ cents_to_dollars('order_total') }} as order_total,

            ---------- timestamps
            -- {{ dbt.date_trunc('day','ordered_at') }} as ordered_at
            {{ dbt.date_trunc('day','ordered_at') }} as purchased_at

        from source

    )

    select * from renamed
  referenced_by: [ orders, order_items ]
